{"version":3,"sources":["store/data.provider.ts","store/students/students.services.ts","store/students/students.actions.ts","store/students/students.models.ts","components/StudentRow.tsx","lib/form/validations.ts","components/FormError.tsx","components/StudentForm.tsx","App.tsx","serviceWorker.ts","store/students/students.reducer.ts","store/index.ts","index.tsx"],"names":["provider","nature","id","Promise","res","rej","db","LocalStorageProvider","hasOwnProperty","model","find","v","value","updatedModel","undefined","map","localStorage","setItem","JSON","stringify","newModel","lastModel","length","push","filter","data","key","newDb","getItem","parse","ActionStudentTypes","Progress","studentsServices","fetchStudents","a","async","getModels","createStudent","student","createModel","updateStudent","updateModel","deleteStudent","delete","studentsUpdateSuccess","type","UpdateSuccess","payload","studentsDeleteSuccess","DeleteSuccess","studentResetEditModel","ResetEditModel","ProgressDictionary","UNSATISFACTORY","SATISFACTORY","WELL","EXCELLENT","defaultStudent","fullName","birthday","progress","defaultStudentsState","loading","students","form","isNew","StudentRow","props","item","Fragment","className","onClick","update","ValidatorRequired","result","errors","valid","FormError","showError","validation","fields","field","err","index","defaultProps","StudentForm","useState","showErrors","state","setState","formChange","name","change","formSubmit","submit","validationResult","rules","rule","validators","fieldValidationResult","validator","validateModel","htmlFor","required","onChange","event","target","reset","initState","then","catch","e","App","studentsState","useSelector","dispatch","useDispatch","updateHandler","document","getElementById","focus","StartEditModel","deleteHandler","Delete","DeleteError","studentsDeleteAsync","useEffect","Fetch","FetchSuccess","FetchError","ChangeEditModel","Create","createdStudent","console","log","CreateSuccess","CreateError","Update","updatedStudent","UpdateError","Boolean","window","location","hostname","match","studentsReducer","action","s","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e0f84b7.chunk.js","sourcesContent":["import {BaseModel} from \"./index\";\n\nexport interface IDataProvider {\n    getModel<T extends BaseModel>(nature: string, id: number): Promise<T>\n\n    getModels<T extends BaseModel[]>(nature: string): Promise<T>\n\n    createModel<T extends BaseModel>(nature: string, value: T): Promise<T>\n\n    updateModel<T extends BaseModel>(nature: string, id: number, value: T): Promise<T>\n\n    delete(nature: string, id: number): Promise<void>\n}\n\nclass LocalStorageProvider implements IDataProvider {\n\n    getModel<T extends BaseModel>(nature: string, id: number): Promise<T> {\n        return new Promise<T>((res, rej) => {\n            const db = LocalStorageProvider.db;\n            if (db.hasOwnProperty(nature)) {\n                const model = db[nature].find((v) => v.id === id);\n                if (model) {\n                    res(model);\n                } else {\n                    rej('model not found');\n                }\n            } else {\n                rej('nature not found');\n            }\n        });\n    }\n\n    getModels<T extends BaseModel[]>(nature: string): Promise<T> {\n        return new Promise<T>((res, rej) => {\n            const db = LocalStorageProvider.db;\n            if (db.hasOwnProperty(nature)) {\n                res(db[nature]);\n            } else {\n                rej('nature not found');\n            }\n        });\n    }\n\n    updateModel<T extends BaseModel>(nature: string, id: number, value: T): Promise<T> {\n        return new Promise<T>((res, rej) => {\n            const db = LocalStorageProvider.db;\n            if (db.hasOwnProperty(nature)) {\n                let updatedModel = undefined;\n                db[nature] = db[nature].map((v) => {\n                    if (v.id === id) {\n                        updatedModel = {\n                            ...v,\n                            ...value\n                        };\n                        return updatedModel;\n                    }\n                    return v;\n                });\n                if (updatedModel) {\n                    localStorage.setItem('database', JSON.stringify(db));\n                    res(updatedModel);\n                } else {\n                    rej('model not found');\n                }\n            } else {\n                rej('nature not found');\n            }\n        });\n    }\n\n    createModel<T extends BaseModel>(nature: string, value: T): Promise<T> {\n        return new Promise<T>((res, rej) => {\n            const db = LocalStorageProvider.db;\n            if (db.hasOwnProperty(nature)) {\n                const newModel = {...value, id: 0};\n                const lastModel = db[nature][db[nature].length - 1];\n                if (lastModel !== undefined) {\n                    newModel.id = lastModel.id + 1;\n                }\n                db[nature].push(newModel);\n                localStorage.setItem('database', JSON.stringify(db));\n                res(newModel);\n            } else {\n                rej('nature not found');\n            }\n        });\n    }\n\n    delete<T extends BaseModel>(nature: string, id: number): Promise<void> {\n        return new Promise<void>((res, rej) => {\n            const db = LocalStorageProvider.db;\n            if (db.hasOwnProperty(nature)) {\n                db[nature] = db[nature].filter(v => v.id !== id);\n                localStorage.setItem('database', JSON.stringify(db));\n                res();\n            } else {\n                rej('nature not found');\n            }\n        });\n    }\n\n    private static get db(): LocalStorage {\n        let db = localStorage.getItem('database');\n        if (db != null) {\n            return JSON.parse(db);\n        }\n        return {};\n    }\n\n    async initState(data: LocalStorage) {\n        const db = LocalStorageProvider.db;\n        let newDb = {...db};\n        for (const key in data) {\n            if (!db.hasOwnProperty(key)) {\n                newDb = {...newDb, [key]: data[key]};\n            }\n        }\n        localStorage.setItem('database', JSON.stringify(newDb));\n    }\n}\n\nexport interface LocalStorage {\n    [key: string]: any;\n}\n\nexport const defaultLocalStorage: LocalStorage = {\n    students: [],\n};\n\nconst provider = new LocalStorageProvider();\n\nexport default provider;\n","import {IStudent} from \"./students.models\";\nimport LocalStorageProvider from \"../data.provider\";\n\nasync function fetchStudents(): Promise<IStudent[]> {\n    return await LocalStorageProvider.getModels<IStudent[]>('students');\n}\n\nasync function createStudent(student: IStudent): Promise<IStudent> {\n    return await LocalStorageProvider.createModel<IStudent>('students', student);\n}\n\nasync function updateStudent(id: number, data: IStudent): Promise<IStudent> {\n    return await LocalStorageProvider.updateModel<IStudent>('students', id, data);\n}\n\nasync function deleteStudent(id: number): Promise<void> {\n    return await LocalStorageProvider.delete('students', id);\n}\n\nconst studentsServices = {\n    fetchStudents,\n    createStudent,\n    updateStudent,\n    deleteStudent,\n};\n\nexport default studentsServices;\n\n","import {Action, Dispatch} from \"redux\";\nimport {IStudent} from \"./students.models\";\nimport studentsServices from \"./students.services\";\n\nexport enum ActionStudentTypes {\n    Fetch = '[Students] Fetch',\n    FetchSuccess = '[Students] Fetch Success',\n    FetchError = '[Students] Fetch Error',\n    Create = '[Students] Create',\n    CreateSuccess = '[Students] Create Success',\n    CreateError = '[Students] Create Error',\n    Update = '[Students] Update',\n    UpdateSuccess = '[Students] Update Success',\n    UpdateError = '[Students] Update Error',\n    Delete = '[Students] Delete',\n    DeleteSuccess = '[Students] Delete Success',\n    DeleteError = '[Students] Delete Error',\n\n    StartEditModel = '[Student] Start Edit Model',\n    ResetEditModel = '[Student] Reset Edit Model',\n    ChangeEditModel = '[Student] Change Edit Model',\n}\n\nexport interface IStudentUpdatePayload  {\n    id: number,\n    student: IStudent,\n}\n\nexport interface IStudentActions extends Action {\n    type: ActionStudentTypes;\n}\n\nexport interface IActionStudentFetch extends IStudentActions {\n    type: ActionStudentTypes.Fetch;\n    payload?: any;\n}\n\nexport interface IActionStudentFetchSuccess extends IStudentActions {\n    type: ActionStudentTypes.FetchSuccess;\n    payload: IStudent[];\n}\n\nexport interface IActionStudentFetchError extends IStudentActions {\n    type: ActionStudentTypes.FetchError;\n    payload?: any;\n}\n\nexport interface IActionStudentCreate extends IStudentActions {\n    type: ActionStudentTypes.Create;\n}\n\nexport interface IActionStudentCreateSuccess extends IStudentActions {\n    type: ActionStudentTypes.CreateSuccess;\n    payload: IStudent;\n}\n\nexport interface IActionStudentCreateError extends IStudentActions {\n    type: ActionStudentTypes.CreateError;\n}\n\nexport interface IActionStudentUpdate extends IStudentActions {\n    type: ActionStudentTypes.Update;\n}\n\nexport interface IActionStudentUpdateSuccess extends IStudentActions {\n    type: ActionStudentTypes.UpdateSuccess;\n    payload: IStudent;\n}\n\nexport interface IActionStudentUpdateError extends IStudentActions {\n    type: ActionStudentTypes.UpdateError;\n}\n\nexport interface IActionStudentDelete extends IStudentActions {\n    type: ActionStudentTypes.Delete;\n}\n\nexport interface IActionStudentDeleteSuccess extends IStudentActions {\n    type: ActionStudentTypes.DeleteSuccess;\n    payload: number;\n}\n\nexport interface IActionStudentDeleteError extends IStudentActions {\n    type: ActionStudentTypes.DeleteError;\n}\n\nexport interface IActionStudentStartEditModel extends IStudentActions {\n    type: ActionStudentTypes.StartEditModel;\n    payload: IStudent;\n}\n\nexport interface IActionStudentResetEditModel extends IStudentActions {\n    type: ActionStudentTypes.ResetEditModel;\n}\n\nexport interface IActionStudentChangeEditModel extends IStudentActions {\n    type: ActionStudentTypes.ChangeEditModel;\n    payload: {[key: string]: any};\n}\n\nexport function studentsFetch(): IActionStudentFetch {\n    return {\n        type: ActionStudentTypes.Fetch,\n    }\n}\n\nexport function studentsFetchSuccess(data: IStudent[]): IActionStudentFetchSuccess {\n    return {\n        type: ActionStudentTypes.FetchSuccess,\n        payload: data,\n    }\n}\n\nexport function studentsFetchError(): IActionStudentFetchError {\n    return {\n        type: ActionStudentTypes.FetchError,\n    }\n}\n\nexport function studentsFetchAsync() {\n    return async (dispatch: Dispatch) => {\n        dispatch(studentsFetch());\n        try {\n            const students = await studentsServices.fetchStudents();\n            dispatch(studentsFetchSuccess(students));\n        } catch (e) {\n            dispatch(studentsFetchError());\n        }\n    }\n}\n\nexport function studentsCreate(): IActionStudentCreate {\n    return {\n        type: ActionStudentTypes.Create,\n    }\n}\n\nexport function studentsCreateSuccess(data: IStudent): IActionStudentCreateSuccess {\n    return {\n        type: ActionStudentTypes.CreateSuccess,\n        payload: data,\n    }\n}\n\nexport function studentsCreateError(): IActionStudentCreateError {\n    return {\n        type: ActionStudentTypes.CreateError,\n    }\n}\n\nexport function studentsCreateAsync(item: IStudent) {\n    return async (dispatch: Dispatch) => {\n        dispatch(studentsCreate());\n        try {\n            const createdStudent = await studentsServices.createStudent(item);\n            console.log(createdStudent);\n            dispatch(studentsCreateSuccess(createdStudent));\n        } catch (e) {\n            dispatch(studentsCreateError());\n        }\n    }\n}\n\nexport function studentsUpdate(): IActionStudentUpdate {\n    return {\n        type: ActionStudentTypes.Update,\n    }\n}\n\nexport function studentsUpdateSuccess(data: IStudent): IActionStudentUpdateSuccess {\n    return {\n        type: ActionStudentTypes.UpdateSuccess,\n        payload: data,\n    }\n}\n\nexport function studentsUpdateError(): IActionStudentUpdateError {\n    return {\n        type: ActionStudentTypes.UpdateError,\n    }\n}\n\nexport function studentsUpdateAsync(data: IStudentUpdatePayload) {\n    return async (dispatch: Dispatch) => {\n        dispatch(studentsUpdate());\n        try {\n            const updatedStudent = await studentsServices.updateStudent(data.id, data.student);\n            dispatch(studentsUpdateSuccess(updatedStudent));\n        } catch (e) {\n            dispatch(studentsUpdateError());\n        }\n    }\n}\n\nexport function studentsDelete(): IActionStudentDelete {\n    return {\n        type: ActionStudentTypes.Delete,\n    }\n}\n\nexport function studentsDeleteSuccess(id: number): IActionStudentDeleteSuccess {\n    return {\n        type: ActionStudentTypes.DeleteSuccess,\n        payload: id,\n    }\n}\n\nexport function studentsDeleteError(): IActionStudentDeleteError {\n    return {\n        type: ActionStudentTypes.DeleteError,\n    }\n}\n\nexport function studentsDeleteAsync(id: number) {\n    return async (dispatch: Dispatch) => {\n        dispatch(studentsDelete());\n        try {\n            await studentsServices.deleteStudent(id);\n            dispatch(studentsDeleteSuccess(id));\n        } catch (e) {\n            dispatch(studentsDeleteError());\n        }\n    }\n}\n\nexport function studentStartEditModel(model: IStudent) {\n    return {\n        type: ActionStudentTypes.StartEditModel,\n        payload: model,\n    }\n}\n\nexport function studentResetEditModel() {\n    return {\n        type: ActionStudentTypes.ResetEditModel,\n    }\n}\n\nexport function studentChangeEditModel(model: {[key: string]: any}) {\n    return {\n        type: ActionStudentTypes.ChangeEditModel,\n        payload: model,\n    }\n}\n\nexport type StudentActions =\n    | IActionStudentFetch\n    | IActionStudentFetchSuccess\n    | IActionStudentFetchError\n    | IActionStudentCreate\n    | IActionStudentCreateSuccess\n    | IActionStudentCreateError\n    | IActionStudentUpdate\n    | IActionStudentUpdateSuccess\n    | IActionStudentUpdateError\n    | IActionStudentDelete\n    | IActionStudentDeleteSuccess\n    | IActionStudentDeleteError\n    | IActionStudentStartEditModel\n    | IActionStudentResetEditModel\n    | IActionStudentChangeEditModel;\n","import {BaseModel} from \"../index\";\n\nexport enum Progress {\n    UNSATISFACTORY = 2,\n    SATISFACTORY = 3,\n    WELL = 4,\n    EXCELLENT = 5,\n}\n\nexport const ProgressDictionary: { id: number, value: string }[] = [\n    {id: Progress.UNSATISFACTORY, value: 'Неуд'},\n    {id: Progress.SATISFACTORY, value: 'Уд'},\n    {id: Progress.WELL, value: 'Хор'},\n    {id: Progress.EXCELLENT, value: 'Отл'},\n];\n\nexport const defaultStudent: IStudent = {\n    id: 0,\n    fullName: '',\n    birthday: '',\n    progress: Progress.EXCELLENT,\n};\n\nexport function createStudent(student: IStudent): IStudent {\n    return {\n        ...defaultStudent,\n        ...student,\n    }\n}\n\nexport interface IStudentsState {\n    loading: boolean;\n    students: IStudent[];\n    form: {\n        model: IStudent;\n        isNew: boolean;\n    };\n}\n\nexport const defaultStudentsState: IStudentsState = {\n    loading: false,\n    students: [],\n    form: {\n        isNew: true,\n        model: defaultStudent,\n    }\n};\n\nexport interface IStudent extends BaseModel {\n    fullName: string;\n    birthday: string;\n    progress: Progress;\n}\n","import React from \"react\";\nimport {IStudent, ProgressDictionary} from \"../store/students/students.models\";\n\n\ninterface IStudentRowProps {\n    model?: IStudent;\n    delete?: () => void;\n    update?: (model: IStudent) => void;\n}\n\nexport const StudentRow: React.FC<IStudentRowProps> = (props) => {\n\n    function deleteButtonHandler() {\n        if (props.delete !== undefined) {\n            props.delete();\n        }\n    }\n\n    function startEditButtonHandler() {\n        props.update(props.model);\n    }\n\n    // eslint-disable-next-line eqeqeq\n    const progress = ProgressDictionary.find(item => item.id == props.model.progress);\n    return <React.Fragment>\n        <td>\n            {props.model.id}\n        </td>\n        <td>\n            {props.model.fullName}\n        </td>\n        <td>\n            {props.model.birthday}\n        </td>\n        <td>\n            {progress ? progress.value : ''}\n        </td>\n        <td>\n            <div className=\"btn-group\">\n                <button className=\"btn btn-warning\" onClick={() => startEditButtonHandler()}>edit</button>\n                {props.delete ?\n                    <button className=\"btn btn-danger\" onClick={() => deleteButtonHandler()}>delete</button> : \"\"}\n            </div>\n        </td>\n    </React.Fragment>\n};\n","export interface ValidationResult {\n    valid: boolean;\n    errors?: string[];\n}\n\nexport interface ModelValidationResult {\n    valid: boolean;\n    fields: {[key: string]: ValidationResult}\n}\n\nexport type ValidationFunc = (model: {[key: string]: any}, key: string) => ValidationResult;\n\nexport interface ValidationRule {\n    field: string;\n    validators: ValidationFunc[]\n}\n\nexport type ValidationRules = ValidationRule[];\n\nexport function ValidatorRequired(model: {[key: string]: any}, key: string): ValidationResult {\n    let result = model.hasOwnProperty(key) && model[key] !== undefined;\n    const errors = [];\n    if (!result) {\n        errors.push(`Property ${key} is undefined`);\n    }\n    if (result) {\n        result = !!model[key];\n        if (!result) {\n            errors.push(`Property ${key} is required`);\n        }\n    }\n    return {\n        valid: result,\n        errors: errors,\n    };\n}\n\nexport function validateModel(model: {[key: string]: any}, rules: ValidationRules): ModelValidationResult {\n    const validation: {\n        valid: boolean;\n        fields: {[key: string]: ValidationResult}\n    } = {\n        valid: true,\n        fields: {}\n    };\n    for (const rule of rules) {\n       for (const validator of rule.validators) {\n           const fieldValidationResult = validator(model, rule.field);\n           validation.valid = validation.valid && fieldValidationResult.valid;\n           validation.fields[rule.field] = fieldValidationResult;\n       }\n    }\n    return validation;\n}\n","import React from \"react\";\nimport {ModelValidationResult} from \"../lib/form/validations\";\n\nexport const FormError: React.FC<{validation: ModelValidationResult, field: string, showError: boolean}> = (props) => {\n    if (!props.showError) {\n        return <div/>;\n    }\n    if (!props.validation || (props.validation.valid || props.validation.fields[props.field].valid)) {\n        return <div/>;\n    }\n    return <div>\n        {props.validation.fields[props.field].errors.map((err, index) => {\n            return <small key={index} className=\"text-danger\">\n                {err}\n            </small>\n        })}\n    </div>;\n};\nFormError.defaultProps = {\n    validation: undefined,\n    field: '',\n    showError: true\n};\n","import React, {useState} from \"react\";\nimport {IStudent, ProgressDictionary} from \"../store/students/students.models\";\nimport {ModelValidationResult, validateModel, ValidatorRequired} from \"../lib/form/validations\";\nimport {FormError} from \"./FormError\";\n\nexport interface StudentFormProps {\n    isNew?: boolean;\n    model?: IStudent;\n    submit?: (isNew: boolean, model: IStudent) => void;\n    reset?: () => void;\n    change?: (data: {[key: string]: any}) => void;\n}\n\nexport const StudentForm: React.FC<StudentFormProps> = (props: StudentFormProps) => {\n\n    const [state, setState] = useState<{showErrors: boolean}>({\n        showErrors: false,\n    });\n\n    function formChange(name: string, value: string) {\n        props.change({[name]: value});\n    }\n\n    function formSubmit() {\n        props.submit(props.isNew, props.model);\n    }\n\n    function formReset() {\n        props.reset();\n    }\n\n    function showErrors(v: boolean = !state.showErrors) {\n        setState({\n            showErrors: v,\n        });\n    }\n\n    const validationResult: ModelValidationResult = validateModel(props.model, [\n        {\n            field: 'fullName',\n            validators: [\n                ValidatorRequired,\n            ],\n        },\n        {\n            field: 'birthday',\n            validators: [\n                ValidatorRequired,\n            ],\n        },\n        {\n            field: 'progress',\n            validators: [\n                ValidatorRequired,\n            ],\n        },\n    ]);\n\n    return <React.Fragment>\n        <form>\n            <div className=\"form-group\">\n                <label htmlFor=\"student-fullName\">FullName</label>\n                <input type=\"text\" className=\"form-control\" id=\"student-fullName\" name=\"fullName\" value={props.model.fullName}\n                     required  onChange={(event => formChange(event.target.name, event.target.value))}/>\n                <FormError field=\"fullName\" validation={validationResult} showError={state.showErrors}/>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"student-birthday\">Birthday</label>\n                <input name=\"birthday\" type=\"date\" className=\"form-control\" value={props.model.birthday} required\n                       onChange={(event => formChange(event.target.name, event.target.value))}/>\n                <FormError field=\"birthday\" validation={validationResult} showError={state.showErrors}/>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"student-progress\">Progress</label>\n                <select name=\"progress\" className=\"form-control\" value={props.model.progress} required\n                        onChange={(event => formChange(event.target.name, event.target.value))}>\n                    {ProgressDictionary.map(item => {\n                        return <React.Fragment key={item.id}>\n                            <option value={item.id}>{item.value}</option>\n                        </React.Fragment>\n                    })}\n                </select>\n                <FormError field=\"progress\" validation={validationResult} showError={state.showErrors}/>\n            </div>\n            <div className=\"btn-group\">\n                {props.isNew &&\n                <button type=\"button\" className=\"btn btn-success\" onClick={() => {\n                    if (validationResult.valid) {\n                        formSubmit();\n                        showErrors(false);\n                    } else {\n                        showErrors(true);\n                    }\n                }}>\n                    Create\n                </button>}\n                {!props.isNew &&\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => {\n                    if (validationResult.valid) {\n                        formSubmit();\n                        showErrors(false);\n                    } else {\n                        showErrors(true);\n                    }\n                }}>\n                    Update\n                </button>}\n                {<button type=\"button\" className=\"btn btn-danger\" onClick={() => {\n                    formReset();\n                    showErrors(false);\n                }}>\n                    Reset\n                </button>}\n            </div>\n        </form>\n    </React.Fragment>\n};\n\nStudentForm.defaultProps = {\n    isNew: true,\n    model: undefined,\n};\n","import React, {useEffect} from 'react';\nimport './App.scss';\nimport {IStudent, IStudentsState} from \"./store/students/students.models\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppState} from \"./store\";\nimport {\n    studentChangeEditModel,\n    studentResetEditModel,\n    studentsCreateAsync,\n    studentsDeleteAsync,\n    studentsFetchAsync, studentStartEditModel,\n    studentsUpdateAsync\n} from \"./store/students/students.actions\";\nimport provider, {defaultLocalStorage} from \"./store/data.provider\";\nimport {StudentRow} from \"./components/StudentRow\";\nimport {StudentForm} from \"./components/StudentForm\";\n\nconst App: React.FC = () => {\n  const studentsState: IStudentsState = useSelector((state: AppState) => state.students);\n  const dispatch = useDispatch();\n  function submitHandler(isNew: boolean, model: IStudent) {\n      if (isNew) {\n          dispatch(studentsCreateAsync(model));\n      } else {\n          dispatch(studentsUpdateAsync({\n              id: model.id,\n              student: model,\n          }))\n      }\n      dispatch(studentResetEditModel());\n  }\n  function updateHandler(item) {\n      document.getElementById('formWrapper').focus();\n      dispatch(studentStartEditModel(item));\n  }\n  function deleteHandler(id: number) {\n      dispatch(studentsDeleteAsync(id));\n  }\n  useEffect(() => {\n      dispatch(studentsFetchAsync());\n  }, [\n      dispatch,\n  ]);\n  return (\n    <div className=\"pt-4 pb-4\">\n        <div className=\"container\">\n            <h1>Students manager</h1>\n            <div className=\"mb-3\" id=\"formWrapper\">\n                <StudentForm change={(data) => dispatch(studentChangeEditModel(data))}\n                             reset={() => dispatch(studentResetEditModel())}\n                             model={studentsState.form.model}\n                             isNew={studentsState.form.isNew} submit={submitHandler}/>\n            </div>\n            <table className=\"table table-striped table-responsive-lg\">\n                <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>FullName</th>\n                        <th>Birthday</th>\n                        <th>Progress</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {studentsState.students.map(student => {\n                    return <tr key={student.id}>\n                        <StudentRow model={student} delete={() => deleteHandler(student.id)}\n                                   update={(model) => updateHandler(model)}/>\n                    </tr>\n                })}\n                </tbody>\n            </table>\n        </div>\n    </div>\n  );\n};\nprovider.initState(defaultLocalStorage).then(() => {}).catch((e) => {});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionStudentTypes, StudentActions} from \"./students.actions\";\nimport {defaultStudent, defaultStudentsState, IStudentsState} from \"./students.models\";\n\nfunction studentsReducer(state: IStudentsState = defaultStudentsState, action: StudentActions) {\n    switch (action.type) {\n        case ActionStudentTypes.Fetch: {\n            return {\n                ...state,\n                loading: true\n            }\n        }\n        case ActionStudentTypes.FetchSuccess: {\n            return {\n                ...state,\n                students: action.payload,\n                loading: false\n            }\n        }\n        case ActionStudentTypes.FetchError: {\n            return {\n                ...state,\n                loading: false\n            }\n        }\n        case ActionStudentTypes.Create: {\n            return {\n                ...state,\n                loading: true\n            }\n        }\n        case ActionStudentTypes.CreateSuccess: {\n            return {\n                ...state,\n                students: [\n                    ...state.students,\n                    action.payload,\n                ],\n                loading: false\n            }\n        }\n        case ActionStudentTypes.CreateError: {\n            return {\n                ...state,\n                loading: false\n            }\n        }\n        case ActionStudentTypes.Update: {\n            return {\n                ...state,\n                loading: true\n            }\n        }\n        case ActionStudentTypes.UpdateSuccess: {\n            return {\n                ...state,\n                students: state.students.map(s => {\n                    if (s.id === action.payload.id) {\n                        return {\n                            ...s,\n                            ...action.payload,\n                        }\n                    }\n                    return s;\n                }),\n                loading: false\n            }\n        }\n        case ActionStudentTypes.UpdateError: {\n            return {\n                ...state,\n                loading: false\n            }\n        }\n        case ActionStudentTypes.Delete: {\n            return {\n                ...state,\n                loading: true\n            }\n        }\n        case ActionStudentTypes.DeleteSuccess: {\n            return {\n                ...state,\n                students: state.students.filter(item => item.id !== action.payload),\n                loading: false\n            }\n        }\n        case ActionStudentTypes.DeleteError: {\n            return {\n                ...state,\n                loading: false\n            }\n        }\n        case ActionStudentTypes.StartEditModel: {\n            return {\n                ...state,\n                form: {\n                    ...state.form,\n                    isNew: false,\n                    model: action.payload,\n                }\n            }\n        }\n        case ActionStudentTypes.ResetEditModel: {\n            return {\n                ...state,\n                form: {\n                    ...state.form,\n                    isNew: true,\n                    model: defaultStudent,\n                }\n            }\n        }\n        case ActionStudentTypes.ChangeEditModel: {\n            return {\n                ...state,\n                form: {\n                    ...state.form,\n                    model: {\n                        ...state.form.model,\n                        ...action.payload,\n                    },\n                }\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport default studentsReducer;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport studentsReducer from \"./students/students.reducer\";\nimport thunk from \"redux-thunk\";\n\nexport interface AppState {\n  students: any;\n}\n\nexport interface BaseModel {\n  id: number;\n}\n\nconst reducer = combineReducers<AppState>({\n  students: studentsReducer\n});\n\n// @ts-ignore\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from \"./store\";\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}